{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/ib_1.png","path":"images/ib_1.png","modified":1,"renderable":0},{"_id":"source/images/ib_3.png","path":"images/ib_3.png","modified":1,"renderable":0},{"_id":"source/images/ib_2.png","path":"images/ib_2.png","modified":1,"renderable":0},{"_id":"source/images/xib_header.png","path":"images/xib_header.png","modified":1,"renderable":0},{"_id":"source/cv/cv_photo.png","path":"cv/cv_photo.png","modified":1,"renderable":0},{"_id":"themes/cactus-dark/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus-dark/LICENSE","hash":"4d5f5f360a18c68f0fd1897bdb1eb1210c2893e3","modified":1504433853000},{"_id":"source/.DS_Store","hash":"82a0b9f202f080c73dac8c51007b7de8d54f76fd","modified":1582150155177},{"_id":"themes/cactus-dark/README.md","hash":"56cc7e8405908ff0ef9454f0347a5b908e39de26","modified":1507674296000},{"_id":"themes/cactus-dark/.DS_Store","hash":"e83720a823599b41c0e63e548d8c1223f2653c97","modified":1582143552660},{"_id":"themes/cactus-dark/_config.yml","hash":"eb860acc1f0e3cc2826e6e6f1daf0d17a35c39c3","modified":1582146647679},{"_id":"source/_data/projects.json","hash":"2f0da4b6916f49ff8eec65f479ed52c2d87c1722","modified":1507674326000},{"_id":"source/_posts/.DS_Store","hash":"0a26eed36e9cedd3bc2c250e4a5e159f77a5eaed","modified":1507673494000},{"_id":"source/_posts/How-to-create-custom-Storyboard-frendly-UIView-without-XIB.md","hash":"0d9ff10591044c144a20e89fd819e7aa6d311e5f","modified":1506466854000},{"_id":"source/_posts/How-to-make-self-resizing-table-view-cells.md","hash":"70ccb952d6d9b2887b486989838e42dca409c45f","modified":1506553163000},{"_id":"source/images/ib_1.png","hash":"147f3dd415ff835d349ecb663f0e46290e9d6b7c","modified":1506443995000},{"_id":"source/images/ib_3.png","hash":"0645a3cc86fefdd19585decfc7df74f1401e393d","modified":1506444155000},{"_id":"source/images/ib_2.png","hash":"f3a676105366666cfd663c943794b84812f0c711","modified":1506443824000},{"_id":"source/images/xib_header.png","hash":"5880cc86c2b5d3b4d38b2148ff4cab583d037d37","modified":1506115951000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1506444144000},{"_id":"source/cv/index.md","hash":"01bece185de9528285c129887ff1aeff2c84923a","modified":1609102849895},{"_id":"source/cv/.DS_Store","hash":"bb4ef35a3531be7f84d216d40790a5505ff81b1e","modified":1582144651148},{"_id":"themes/cactus-dark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1504433853000},{"_id":"themes/cactus-dark/.git/config","hash":"2b506d51540e6bdc72957c335c621b206b019990","modified":1504433853000},{"_id":"themes/cactus-dark/.git/index","hash":"362e9278b4932ad6fbeec4d521acab311b8d20ca","modified":1506467883000},{"_id":"themes/cactus-dark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1504433849000},{"_id":"themes/cactus-dark/.git/packed-refs","hash":"06e90d1a99288e97f6d178771ff1832181d7091a","modified":1504433853000},{"_id":"themes/cactus-dark/layout/layout.ejs","hash":"8484532ad7c4da22f46fc1394bb2fd9ded34be1f","modified":1504433853000},{"_id":"themes/cactus-dark/layout/index.ejs","hash":"53196279a25035da55902f4b8f0ebdf7871d39d1","modified":1504433853000},{"_id":"themes/cactus-dark/layout/.DS_Store","hash":"ddeb37751ad0cb551fb510725a7c4968c31ec68b","modified":1582143552659},{"_id":"themes/cactus-dark/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1504433853000},{"_id":"themes/cactus-dark/layout/archive.ejs","hash":"ab9798bf534485a4fed4d3089011421858afdd26","modified":1504433853000},{"_id":"themes/cactus-dark/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1504433853000},{"_id":"themes/cactus-dark/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1504433853000},{"_id":"themes/cactus-dark/source/.DS_Store","hash":"667ecaef8e3288c5a215ebe31f70b1128951bf0d","modified":1601644133482},{"_id":"source/cv/cv_photo.png","hash":"7ee06bf908fb691ce2a11d842fe9ef5e9122cd64","modified":1582149969760},{"_id":"themes/cactus-dark/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1504433853000},{"_id":"themes/cactus-dark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1504433849000},{"_id":"themes/cactus-dark/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1504433849000},{"_id":"themes/cactus-dark/.git/logs/HEAD","hash":"1f84e76d115e82ec665334fd8623b2232a289fbe","modified":1504433853000},{"_id":"themes/cactus-dark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1504433849000},{"_id":"themes/cactus-dark/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1506467527000},{"_id":"themes/cactus-dark/layout/_partial/head.ejs","hash":"7782e6b1ce72fcf121f0017d383e2fb87e72c539","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/.DS_Store","hash":"9074d05b372fff9a3d58c8dde41aadc336dd1b16","modified":1582143552661},{"_id":"themes/cactus-dark/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/pagination.ejs","hash":"ca660c59aec56daa4a7b41715b97434d4a24c37e","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/footer.ejs","hash":"8315cd0b6deb0267121dd617021c75605330fc68","modified":1506467525000},{"_id":"themes/cactus-dark/layout/_partial/scripts.ejs","hash":"6cffa3adb2f5b93a47f29549ac589c8bce8c223e","modified":1506467880000},{"_id":"themes/cactus-dark/layout/_partial/styles.ejs","hash":"e62b799d8ac369d1f1b36bd2649ecc34aec3384c","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_extend.styl","hash":"faca25132d55e8989d1c1d638e55d1e97de3c561","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/.DS_Store","hash":"31d721e81e3516a56e269e442b69ef2554d3e90b","modified":1504434979000},{"_id":"themes/cactus-dark/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_variables.styl","hash":"133c590701bec1082b9c63bee82e866f9e4cd400","modified":1504435368000},{"_id":"themes/cactus-dark/source/css/style.styl","hash":"ede737ff18ca19420ca65aacd1d31399ccff2a16","modified":1504433853000},{"_id":"themes/cactus-dark/source/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1504433853000},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","hash":"46d9ec5d5ccdd6a934c4e09cf4453e8fae641d10","modified":1507672537000},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","hash":"f274cfe8ccc2e6d4a4e775aec5869bdf71127152","modified":1507672625000},{"_id":"themes/cactus-dark/source/images/logo.png","hash":"cc836f40c0d97f17a5e40701a4f8e56b88b7043c","modified":1507672353000},{"_id":"themes/cactus-dark/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1507673474000},{"_id":"themes/cactus-dark/.git/objects/pack/pack-40230aa868fb96b84e8920de3eeebd9209fed112.idx","hash":"cc255e3accff51ccd82f0238c969364b543cdb8b","modified":1504433853000},{"_id":"themes/cactus-dark/.git/refs/heads/master","hash":"b03dc4e9add397c00d450a9acf48e5bdf99bab0f","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/actions_desktop.ejs","hash":"063ae931a6902f192e086fe5cceae587d27ed196","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/actions_mobile.ejs","hash":"64d0f85480997a4fa53c99954e9454c189595e9c","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1504433853000},{"_id":"themes/cactus-dark/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/archive.styl","hash":"18fa7f84a9783c5fb56c9f450ea93bd88408e682","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/article.styl","hash":"202b775a966d7bc35bf5adc693b62463dec106bb","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/.DS_Store","hash":"b23b477f2ae40596f80e1b691ec002c66835f2c6","modified":1507673908000},{"_id":"themes/cactus-dark/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/header.styl","hash":"63707d9103a283147ca222fd6f8ff9bffbffe427","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/pagination.styl","hash":"03a1b81d60dae3dd55963b7e74a6fee83470e6bb","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504433853000},{"_id":"themes/cactus-dark/.git/logs/refs/heads/master","hash":"1f84e76d115e82ec665334fd8623b2232a289fbe","modified":1504433853000},{"_id":"themes/cactus-dark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_mobile.styl","hash":"e6a802d7ee1023c5fc5fac18bb0ba3dc03ef2ac8","modified":1504433853000},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_desktop.styl","hash":"2bbbb20ae8a99bc08fb95ba0ec8f39ed6ccb8534","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504433853000},{"_id":"themes/cactus-dark/source/images/favicon.ico","hash":"af9b2123091e755f8d19c2651d0edc447c5cde49","modified":1507672692000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504433853000},{"_id":"themes/cactus-dark/.git/logs/refs/remotes/origin/HEAD","hash":"1f84e76d115e82ec665334fd8623b2232a289fbe","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1504433853000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1504433853000},{"_id":"themes/cactus-dark/.git/objects/pack/pack-40230aa868fb96b84e8920de3eeebd9209fed112.pack","hash":"13c6d5fbb198d4bb5f1a53a792963fcf7d809b8a","modified":1504433853000},{"_id":"public/cv/index.html","hash":"37f077cafe3a9cf94d8109c8ec0e8374249344d8","modified":1609102872614},{"_id":"public/2017/09/28/How-to-make-self-resizing-table-view-cells/index.html","hash":"d5a5a320d245665a0c50b0bb758c82cb49a18abd","modified":1609102872614},{"_id":"public/archives/index.html","hash":"149c8e7c56e1a6bb15731895a90b15ee4e950946","modified":1609102872615},{"_id":"public/archives/2017/index.html","hash":"f7c7db6d236ad695698dc44553556d60fe2d10aa","modified":1609102872615},{"_id":"public/archives/2017/09/index.html","hash":"83aa0052c579191796d1d3bdfb8f305e9e67a632","modified":1609102872615},{"_id":"public/categories/iOS/index.html","hash":"e92d7b8426191acb28aeb6162a7bb8948f3996b1","modified":1609102872615},{"_id":"public/index.html","hash":"56a0ef67894ccd3b3342b51c73d17deaa95da730","modified":1609102872615},{"_id":"public/tags/ios/index.html","hash":"f3421c48890a65d5d4a7c1d62b09f3de7d7926e8","modified":1609102872615},{"_id":"public/tags/xcode/index.html","hash":"e38e20b2133debcf40ba0a0b72feeeae3ae010ae","modified":1609102872616},{"_id":"public/tags/storyboard/index.html","hash":"b0438017b80cdf87ab45dd776ae498cdbfa995e8","modified":1609102872616},{"_id":"public/tags/swift/index.html","hash":"e86154a653a819ab82fd4637571ae8313a78a23d","modified":1609102872616},{"_id":"public/tags/ibdesignable/index.html","hash":"f5697645e266f6dbd6a100257e47d766ef5b7591","modified":1609102872617},{"_id":"public/2017/09/23/How-to-create-custom-Storyboard-frendly-UIView-without-XIB/index.html","hash":"7980ac074c08349de4b619a14c54d2720d44eb06","modified":1609102872617},{"_id":"public/images/ib_3.png","hash":"0645a3cc86fefdd19585decfc7df74f1401e393d","modified":1609102872627},{"_id":"public/images/ib_2.png","hash":"f3a676105366666cfd663c943794b84812f0c711","modified":1609102872627},{"_id":"public/images/xib_header.png","hash":"5880cc86c2b5d3b4d38b2148ff4cab583d037d37","modified":1609102872627},{"_id":"public/images/apple-touch-icon.png","hash":"46d9ec5d5ccdd6a934c4e09cf4453e8fae641d10","modified":1609102872627},{"_id":"public/images/favicon-192x192.png","hash":"f274cfe8ccc2e6d4a4e775aec5869bdf71127152","modified":1609102872627},{"_id":"public/images/logo.png","hash":"cc836f40c0d97f17a5e40701a4f8e56b88b7043c","modified":1609102872627},{"_id":"public/images/ib_1.png","hash":"147f3dd415ff835d349ecb663f0e46290e9d6b7c","modified":1609102872627},{"_id":"public/cv/cv_photo.png","hash":"7ee06bf908fb691ce2a11d842fe9ef5e9122cd64","modified":1609102873123},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1609102873123},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1609102873125},{"_id":"public/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1609102873131},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1609102873131},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1609102873131},{"_id":"public/css/style.css","hash":"53d74a0ae1d678fbbc678e6895380c053852317a","modified":1609102873131},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1609102873131},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1609102873131},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1609102873131},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1609102873131},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1609102873131},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1609102873131},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1609102873132},{"_id":"public/images/favicon.ico","hash":"af9b2123091e755f8d19c2651d0edc447c5cde49","modified":1609102873153},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1609102873161},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1609102873223},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1609102873223},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1609102873224},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1609102873244},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1609102873244},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1609102873247},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1609102873248},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1609102873250},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1609102873251},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1609102873252},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1609102873255},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1609102873256}],"Category":[{"name":"iOS","_id":"ckj7may0l0003gfsc83tkv6ia"}],"Data":[{"_id":"projects","data":[{"name":"RFCircleView","url":"https://cocoapods.org/pods/RFCircleView","desc":"Universal GUI component for iOS. Written using swift and auto-layout."}]}],"Page":[{"title":"Roman Filippov's curriculum vitae","date":"2017-10-10T22:53:05.000Z","_content":"\n## General Information\n<img align=\"left\" style=\"margin-right: 25px; margin-bottom: 25px; margin-top: 25px;\" width=\"140\" height=\"140\" src=\"cv_photo.png\">\n Name: Roman Filippov\n City: St.Petersburg\n Sex: Male\n Age: 28\n Specialization: iOS Developer 📱\n [Write me an e-mail](mailto:filiroman.tsu@gmail.com)\n\n## Work Experience\n- __10/2018 - Present, Upwork__\n  - _Software Developer_\n  Top Rated Freelancer, 100% Job Success Rate.\n  [Upwork Profile](https://www.upwork.com/freelancers/~013e5ee5422c3c47ea?viewMode=1)\n  Native iOS Development: Swift, Objective-C\n  JUCE VST Audio Plugins Development: C++\n\n- __03/2018 - 10/2018, Forasoft__\n  - _iOS Developer_\n  Native iOS Development: Swift, Realm, CocoaPods, Git, JIRA, Jenkins\n\n- __10/2015 - 07/2016, Aalto University__\n  - _Research Assistant (programmer)_\n  Authentication and access control module development for O-MI and O-DF protocols reference implementation: Java SE, JS, SQlite, Git\n\n- __12/2014 - 09/2015, SocialBadge__\n  - _Co-Founder_\n  Company development\n  Physical product development\n  Mobile apps development\n  Strategy planning\n\n- __03/2013 - 02/2016, Steppechange LLC__\n  - _iOS Developer_\n  Native iOS Development: Objective-C, Git\n\n- __02/2013 - 06/2013, Computer Science Center__\n  - _Intern Developer_\n  Web-service backend programming: Java SE\n\n## Teaching Experience\n- __09/2017 - 12/2017, St.Petersburg State University__\n  - _Teacher (Assistant)_\n  Databases and network technologies course\n\n## Publications\n- __2017, MOBIQUITOUS 2017__\n  - _Narges Yousefnezhad, Roman Filippov, Asad Javed, Andrea Buda, Manik Madhikermi and Kary Framling_\n  Authentication and Access Control for Open Messaging Interface Standard [Download](cv/mobiquitous_2017_paper.pdf)\n- __2016, Aalto University__\n  - _Roman Filippov, Andrea Buda, Kary Framling_\n  Security model for the Open Messaging Interface (O-MI) Protocol\n  Master's Thesis [Download](https://aaltodoc.aalto.fi/handle/123456789/20936)\n\n## Education\n- __2016 - 2020, St.Petersburg State University__\n  - _Faculty of applied mathematics and control processes_\n  Department of technology of programming\n  PhD Student\n\n- __2014 - 2016, Aalto Univesity, Helsinki, Finland__\n  - _School of science_\n  Service Design and Engineering\n  Master of Science Degree\n\n- __2011 - 2014, Computer Science Center, St.Petersburg__\n  - _Advanced training courses_\n  Software Engineering\n\n- __2009 - 2014, St.Petersburg State University__\n  - _Faculty of applied mathematics and control processes_\n  Department of technology of programming\n  Mathematician, System Programmer (Specialist)\n\n## Languages\n🇷🇺 Russian - Native\n🇬🇧 English - Advanced\n🇫🇮 Finnish - Basic\n\n\n## Skills\n- __General__\n  - Swift, Objective-C, iOS SDK, C++\n- __Testing__\n  - Unit testing, TDD, UI testing\n- __UI__\n  - Autolayout, SnapKit, Storyboards, XIB, UI in code, VFL\n- __Network__\n  - Alamofire, REST, Server-client architecture, JSON, HTTP\n- __Database__\n  - Realm, CoreData, SQLite, PostgreSQL\n- __Design__\n  - Zeplin, Figma, Sketch\n- __Cloud Services__\n  - Amazon AWS, Firebase\n- __Task management__\n  - JIRA, Trello, Slack\n\n## Hobbies\n- Guitar :guitar:, drums 🥁, singer :microphone:\n- Hiking 🏕️\n- Film photography 📷\n","source":"cv/index.md","raw":"---\ntitle: Roman Filippov's curriculum vitae\ndate: 2017-10-11 01:53:05\n---\n\n## General Information\n<img align=\"left\" style=\"margin-right: 25px; margin-bottom: 25px; margin-top: 25px;\" width=\"140\" height=\"140\" src=\"cv_photo.png\">\n Name: Roman Filippov\n City: St.Petersburg\n Sex: Male\n Age: 28\n Specialization: iOS Developer 📱\n [Write me an e-mail](mailto:filiroman.tsu@gmail.com)\n\n## Work Experience\n- __10/2018 - Present, Upwork__\n  - _Software Developer_\n  Top Rated Freelancer, 100% Job Success Rate.\n  [Upwork Profile](https://www.upwork.com/freelancers/~013e5ee5422c3c47ea?viewMode=1)\n  Native iOS Development: Swift, Objective-C\n  JUCE VST Audio Plugins Development: C++\n\n- __03/2018 - 10/2018, Forasoft__\n  - _iOS Developer_\n  Native iOS Development: Swift, Realm, CocoaPods, Git, JIRA, Jenkins\n\n- __10/2015 - 07/2016, Aalto University__\n  - _Research Assistant (programmer)_\n  Authentication and access control module development for O-MI and O-DF protocols reference implementation: Java SE, JS, SQlite, Git\n\n- __12/2014 - 09/2015, SocialBadge__\n  - _Co-Founder_\n  Company development\n  Physical product development\n  Mobile apps development\n  Strategy planning\n\n- __03/2013 - 02/2016, Steppechange LLC__\n  - _iOS Developer_\n  Native iOS Development: Objective-C, Git\n\n- __02/2013 - 06/2013, Computer Science Center__\n  - _Intern Developer_\n  Web-service backend programming: Java SE\n\n## Teaching Experience\n- __09/2017 - 12/2017, St.Petersburg State University__\n  - _Teacher (Assistant)_\n  Databases and network technologies course\n\n## Publications\n- __2017, MOBIQUITOUS 2017__\n  - _Narges Yousefnezhad, Roman Filippov, Asad Javed, Andrea Buda, Manik Madhikermi and Kary Framling_\n  Authentication and Access Control for Open Messaging Interface Standard [Download](cv/mobiquitous_2017_paper.pdf)\n- __2016, Aalto University__\n  - _Roman Filippov, Andrea Buda, Kary Framling_\n  Security model for the Open Messaging Interface (O-MI) Protocol\n  Master's Thesis [Download](https://aaltodoc.aalto.fi/handle/123456789/20936)\n\n## Education\n- __2016 - 2020, St.Petersburg State University__\n  - _Faculty of applied mathematics and control processes_\n  Department of technology of programming\n  PhD Student\n\n- __2014 - 2016, Aalto Univesity, Helsinki, Finland__\n  - _School of science_\n  Service Design and Engineering\n  Master of Science Degree\n\n- __2011 - 2014, Computer Science Center, St.Petersburg__\n  - _Advanced training courses_\n  Software Engineering\n\n- __2009 - 2014, St.Petersburg State University__\n  - _Faculty of applied mathematics and control processes_\n  Department of technology of programming\n  Mathematician, System Programmer (Specialist)\n\n## Languages\n🇷🇺 Russian - Native\n🇬🇧 English - Advanced\n🇫🇮 Finnish - Basic\n\n\n## Skills\n- __General__\n  - Swift, Objective-C, iOS SDK, C++\n- __Testing__\n  - Unit testing, TDD, UI testing\n- __UI__\n  - Autolayout, SnapKit, Storyboards, XIB, UI in code, VFL\n- __Network__\n  - Alamofire, REST, Server-client architecture, JSON, HTTP\n- __Database__\n  - Realm, CoreData, SQLite, PostgreSQL\n- __Design__\n  - Zeplin, Figma, Sketch\n- __Cloud Services__\n  - Amazon AWS, Firebase\n- __Task management__\n  - JIRA, Trello, Slack\n\n## Hobbies\n- Guitar :guitar:, drums 🥁, singer :microphone:\n- Hiking 🏕️\n- Film photography 📷\n","updated":"2020-12-27T21:00:49.895Z","path":"cv/index.html","comments":1,"layout":"page","_id":"ckj7may0g0001gfscaovciwul","content":"<h2 id=\"General-Information\"><a href=\"#General-Information\" class=\"headerlink\" title=\"General Information\"></a>General Information</h2><p><img align=\"left\" style=\"margin-right: 25px; margin-bottom: 25px; margin-top: 25px;\" width=\"140\" height=\"140\" src=\"cv_photo.png\"><br> Name: Roman Filippov<br> City: St.Petersburg<br> Sex: Male<br> Age: 28<br> Specialization: iOS Developer 📱<br> <a href=\"mailto:filiroman.tsu@gmail.com\" target=\"_blank\" rel=\"external\">Write me an e-mail</a></p>\n<h2 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h2><ul>\n<li><p><strong>10/2018 - Present, Upwork</strong></p>\n<ul>\n<li><em>Software Developer</em><br>Top Rated Freelancer, 100% Job Success Rate.<br><a href=\"https://www.upwork.com/freelancers/~013e5ee5422c3c47ea?viewMode=1\" target=\"_blank\" rel=\"external\">Upwork Profile</a><br>Native iOS Development: Swift, Objective-C<br>JUCE VST Audio Plugins Development: C++</li>\n</ul>\n</li>\n<li><p><strong>03/2018 - 10/2018, Forasoft</strong></p>\n<ul>\n<li><em>iOS Developer</em><br>Native iOS Development: Swift, Realm, CocoaPods, Git, JIRA, Jenkins</li>\n</ul>\n</li>\n<li><p><strong>10/2015 - 07/2016, Aalto University</strong></p>\n<ul>\n<li><em>Research Assistant (programmer)</em><br>Authentication and access control module development for O-MI and O-DF protocols reference implementation: Java SE, JS, SQlite, Git</li>\n</ul>\n</li>\n<li><p><strong>12/2014 - 09/2015, SocialBadge</strong></p>\n<ul>\n<li><em>Co-Founder</em><br>Company development<br>Physical product development<br>Mobile apps development<br>Strategy planning</li>\n</ul>\n</li>\n<li><p><strong>03/2013 - 02/2016, Steppechange LLC</strong></p>\n<ul>\n<li><em>iOS Developer</em><br>Native iOS Development: Objective-C, Git</li>\n</ul>\n</li>\n<li><p><strong>02/2013 - 06/2013, Computer Science Center</strong></p>\n<ul>\n<li><em>Intern Developer</em><br>Web-service backend programming: Java SE</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Teaching-Experience\"><a href=\"#Teaching-Experience\" class=\"headerlink\" title=\"Teaching Experience\"></a>Teaching Experience</h2><ul>\n<li><strong>09/2017 - 12/2017, St.Petersburg State University</strong><ul>\n<li><em>Teacher (Assistant)</em><br>Databases and network technologies course</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><ul>\n<li><strong>2017, MOBIQUITOUS 2017</strong><ul>\n<li><em>Narges Yousefnezhad, Roman Filippov, Asad Javed, Andrea Buda, Manik Madhikermi and Kary Framling</em><br>Authentication and Access Control for Open Messaging Interface Standard <a href=\"cv/mobiquitous_2017_paper.pdf\">Download</a></li>\n</ul>\n</li>\n<li><strong>2016, Aalto University</strong><ul>\n<li><em>Roman Filippov, Andrea Buda, Kary Framling</em><br>Security model for the Open Messaging Interface (O-MI) Protocol<br>Master’s Thesis <a href=\"https://aaltodoc.aalto.fi/handle/123456789/20936\" target=\"_blank\" rel=\"external\">Download</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><ul>\n<li><p><strong>2016 - 2020, St.Petersburg State University</strong></p>\n<ul>\n<li><em>Faculty of applied mathematics and control processes</em><br>Department of technology of programming<br>PhD Student</li>\n</ul>\n</li>\n<li><p><strong>2014 - 2016, Aalto Univesity, Helsinki, Finland</strong></p>\n<ul>\n<li><em>School of science</em><br>Service Design and Engineering<br>Master of Science Degree</li>\n</ul>\n</li>\n<li><p><strong>2011 - 2014, Computer Science Center, St.Petersburg</strong></p>\n<ul>\n<li><em>Advanced training courses</em><br>Software Engineering</li>\n</ul>\n</li>\n<li><p><strong>2009 - 2014, St.Petersburg State University</strong></p>\n<ul>\n<li><em>Faculty of applied mathematics and control processes</em><br>Department of technology of programming<br>Mathematician, System Programmer (Specialist)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Languages\"><a href=\"#Languages\" class=\"headerlink\" title=\"Languages\"></a>Languages</h2><p>🇷🇺 Russian - Native<br>🇬🇧 English - Advanced<br>🇫🇮 Finnish - Basic</p>\n<h2 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills\"></a>Skills</h2><ul>\n<li><strong>General</strong><ul>\n<li>Swift, Objective-C, iOS SDK, C++</li>\n</ul>\n</li>\n<li><strong>Testing</strong><ul>\n<li>Unit testing, TDD, UI testing</li>\n</ul>\n</li>\n<li><strong>UI</strong><ul>\n<li>Autolayout, SnapKit, Storyboards, XIB, UI in code, VFL</li>\n</ul>\n</li>\n<li><strong>Network</strong><ul>\n<li>Alamofire, REST, Server-client architecture, JSON, HTTP</li>\n</ul>\n</li>\n<li><strong>Database</strong><ul>\n<li>Realm, CoreData, SQLite, PostgreSQL</li>\n</ul>\n</li>\n<li><strong>Design</strong><ul>\n<li>Zeplin, Figma, Sketch</li>\n</ul>\n</li>\n<li><strong>Cloud Services</strong><ul>\n<li>Amazon AWS, Firebase</li>\n</ul>\n</li>\n<li><strong>Task management</strong><ul>\n<li>JIRA, Trello, Slack</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Hobbies\"><a href=\"#Hobbies\" class=\"headerlink\" title=\"Hobbies\"></a>Hobbies</h2><ul>\n<li>Guitar <span class=\"null\" style=\"display:inline;horizontal-align:left\" title=\"guitar\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8\">&#x1f3b8;</span>, drums 🥁, singer <span class=\"null\" style=\"display:inline;horizontal-align:left\" title=\"microphone\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8\">&#x1f3a4;</span></li>\n<li>Hiking 🏕️</li>\n<li>Film photography 📷</li>\n</ul>\n","site":{"data":{"projects":[{"name":"RFCircleView","url":"https://cocoapods.org/pods/RFCircleView","desc":"Universal GUI component for iOS. Written using swift and auto-layout."}]}},"excerpt":"","more":"<h2 id=\"General-Information\"><a href=\"#General-Information\" class=\"headerlink\" title=\"General Information\"></a>General Information</h2><p><img align=\"left\" style=\"margin-right: 25px; margin-bottom: 25px; margin-top: 25px;\" width=\"140\" height=\"140\" src=\"cv_photo.png\"><br> Name: Roman Filippov<br> City: St.Petersburg<br> Sex: Male<br> Age: 28<br> Specialization: iOS Developer 📱<br> <a href=\"mailto:filiroman.tsu@gmail.com\" target=\"_blank\" rel=\"external\">Write me an e-mail</a></p>\n<h2 id=\"Work-Experience\"><a href=\"#Work-Experience\" class=\"headerlink\" title=\"Work Experience\"></a>Work Experience</h2><ul>\n<li><p><strong>10/2018 - Present, Upwork</strong></p>\n<ul>\n<li><em>Software Developer</em><br>Top Rated Freelancer, 100% Job Success Rate.<br><a href=\"https://www.upwork.com/freelancers/~013e5ee5422c3c47ea?viewMode=1\" target=\"_blank\" rel=\"external\">Upwork Profile</a><br>Native iOS Development: Swift, Objective-C<br>JUCE VST Audio Plugins Development: C++</li>\n</ul>\n</li>\n<li><p><strong>03/2018 - 10/2018, Forasoft</strong></p>\n<ul>\n<li><em>iOS Developer</em><br>Native iOS Development: Swift, Realm, CocoaPods, Git, JIRA, Jenkins</li>\n</ul>\n</li>\n<li><p><strong>10/2015 - 07/2016, Aalto University</strong></p>\n<ul>\n<li><em>Research Assistant (programmer)</em><br>Authentication and access control module development for O-MI and O-DF protocols reference implementation: Java SE, JS, SQlite, Git</li>\n</ul>\n</li>\n<li><p><strong>12/2014 - 09/2015, SocialBadge</strong></p>\n<ul>\n<li><em>Co-Founder</em><br>Company development<br>Physical product development<br>Mobile apps development<br>Strategy planning</li>\n</ul>\n</li>\n<li><p><strong>03/2013 - 02/2016, Steppechange LLC</strong></p>\n<ul>\n<li><em>iOS Developer</em><br>Native iOS Development: Objective-C, Git</li>\n</ul>\n</li>\n<li><p><strong>02/2013 - 06/2013, Computer Science Center</strong></p>\n<ul>\n<li><em>Intern Developer</em><br>Web-service backend programming: Java SE</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Teaching-Experience\"><a href=\"#Teaching-Experience\" class=\"headerlink\" title=\"Teaching Experience\"></a>Teaching Experience</h2><ul>\n<li><strong>09/2017 - 12/2017, St.Petersburg State University</strong><ul>\n<li><em>Teacher (Assistant)</em><br>Databases and network technologies course</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><ul>\n<li><strong>2017, MOBIQUITOUS 2017</strong><ul>\n<li><em>Narges Yousefnezhad, Roman Filippov, Asad Javed, Andrea Buda, Manik Madhikermi and Kary Framling</em><br>Authentication and Access Control for Open Messaging Interface Standard <a href=\"cv/mobiquitous_2017_paper.pdf\">Download</a></li>\n</ul>\n</li>\n<li><strong>2016, Aalto University</strong><ul>\n<li><em>Roman Filippov, Andrea Buda, Kary Framling</em><br>Security model for the Open Messaging Interface (O-MI) Protocol<br>Master’s Thesis <a href=\"https://aaltodoc.aalto.fi/handle/123456789/20936\" target=\"_blank\" rel=\"external\">Download</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h2><ul>\n<li><p><strong>2016 - 2020, St.Petersburg State University</strong></p>\n<ul>\n<li><em>Faculty of applied mathematics and control processes</em><br>Department of technology of programming<br>PhD Student</li>\n</ul>\n</li>\n<li><p><strong>2014 - 2016, Aalto Univesity, Helsinki, Finland</strong></p>\n<ul>\n<li><em>School of science</em><br>Service Design and Engineering<br>Master of Science Degree</li>\n</ul>\n</li>\n<li><p><strong>2011 - 2014, Computer Science Center, St.Petersburg</strong></p>\n<ul>\n<li><em>Advanced training courses</em><br>Software Engineering</li>\n</ul>\n</li>\n<li><p><strong>2009 - 2014, St.Petersburg State University</strong></p>\n<ul>\n<li><em>Faculty of applied mathematics and control processes</em><br>Department of technology of programming<br>Mathematician, System Programmer (Specialist)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Languages\"><a href=\"#Languages\" class=\"headerlink\" title=\"Languages\"></a>Languages</h2><p>🇷🇺 Russian - Native<br>🇬🇧 English - Advanced<br>🇫🇮 Finnish - Basic</p>\n<h2 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills\"></a>Skills</h2><ul>\n<li><strong>General</strong><ul>\n<li>Swift, Objective-C, iOS SDK, C++</li>\n</ul>\n</li>\n<li><strong>Testing</strong><ul>\n<li>Unit testing, TDD, UI testing</li>\n</ul>\n</li>\n<li><strong>UI</strong><ul>\n<li>Autolayout, SnapKit, Storyboards, XIB, UI in code, VFL</li>\n</ul>\n</li>\n<li><strong>Network</strong><ul>\n<li>Alamofire, REST, Server-client architecture, JSON, HTTP</li>\n</ul>\n</li>\n<li><strong>Database</strong><ul>\n<li>Realm, CoreData, SQLite, PostgreSQL</li>\n</ul>\n</li>\n<li><strong>Design</strong><ul>\n<li>Zeplin, Figma, Sketch</li>\n</ul>\n</li>\n<li><strong>Cloud Services</strong><ul>\n<li>Amazon AWS, Firebase</li>\n</ul>\n</li>\n<li><strong>Task management</strong><ul>\n<li>JIRA, Trello, Slack</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Hobbies\"><a href=\"#Hobbies\" class=\"headerlink\" title=\"Hobbies\"></a>Hobbies</h2><ul>\n<li>Guitar <span class=\"null\" style=\"display:inline;horizontal-align:left\" title=\"guitar\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8\">&#x1f3b8;</span>, drums 🥁, singer <span class=\"null\" style=\"display:inline;horizontal-align:left\" title=\"microphone\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8\">&#x1f3a4;</span></li>\n<li>Hiking 🏕️</li>\n<li>Film photography 📷</li>\n</ul>\n"}],"Post":[{"title":"How to create custom storyboard-friendly UIView without XIB","date":"2017-09-22T21:00:07.000Z","_content":"\n{% blockquote  Charles-Guillaume Étienne %}\nOne is never served so well as by oneself.\n{% endblockquote %}\n\nIn this short tutorial we will create a custom UI control view, make it easily designable with storyboard and auto-layout compatible. With no doubt you can design and create your views using XIB files or directly on storyboards, but in complex applications views can be complicated too. They can be dynamically loaded, depending on the events or just hard-coded using some other 3rd party view classes that aren't storyboard-friendly. Anyway you will see that the process itself is very easy and understandable, so let's get started!\n\n## Creating a project\n\nOpen Xcode and create a new single-view application. In this tutorial I'll use Swift 4, but it's of course possible to make everything using earlier versions of Swift (with a slightly different syntax) or even Objective-C.\n\nOnce created, the app contains a default view controller and a storyboard.\n![\"Result of the tutorial\"](/images/xib_header.png)\nIn this tutorial we will create a circle UI element that usually helps to depict some stored value in settings section of your app (could be anything else, it's up to your imagination!). So first we create a new Swift file with a UIView subclass definition inside. Since we don't need name prefixes anymore, we simply call that class CircleView. Let's start by adding several variables and properties, please see the code listing below.\n\n{% codeblock lang:swift %}\n  @IBDesignable public class CircleView: UIView {\n\n    var circleLabel: UILabel!\n    @IBInspectable public var outlineColor: UIColor = UIColor.orange\n    @IBInspectable public var counterColor: UIColor = UIColor.orange\n    @IBInspectable public var minValue: Int = 0\n    @IBInspectable public var maxValue: Int = 8\n    @IBInspectable public var lineWidth: CGFloat = 4.0\n    @IBInspectable public var arcWidth: CGFloat = 80.0\n    @IBInspectable public var arcAngle: Int = 360\n\n  }\n{% endcodeblock %}\n\nHere we declare the basic parameters of our view - outline and counter colors, min and max values of our counter, also the line width of our outline, the width of the arc and the general arc angle in degrees (this is the angle when our counter reaches its maximum). All properties are declared as public so that we should be able to change them from the outside of the class, except the label, which is intended only for showing the counter, so we hide it's implementation. Note the @IBDesignable keyword before the class definition. It tells xcode that the class should be rendered in IB. We also use @IBInspectable keyword to show that these properties should be Interface Builder compatible so we could change them from our storyboard file without writing any code. We'll soon come to that. At the next step we add the counter property and some util methods to the class definition.\n\n{% codeblock lang:swift %}\n  var _counter: Int = 0 {\n    didSet {\n\n      guard _counter >= minValue else {\n        _counter = minValue\n        return\n      }\n\n      guard _counter <= maxValue else {\n        _counter = maxValue\n        return\n      }\n\n      circleLabel.text = String(_counter)\n      setNeedsDisplay()\n    }\n  }\n\n  @IBInspectable public var counter: Int {\n    get {\n      return _counter\n    }\n    set (aNewValue) {\n\n      if aNewValue != _counter {\n        _counter = aNewValue\n      }\n    }\n  }\n\n  var radius: CGFloat {\n    get {\n      return max(bounds.width, bounds.height)\n    }\n  }\n\n  var valuesCount: Int {\n    get {\n      return maxValue-minValue+1\n    }\n  }\n{% endcodeblock %}\n\nHere we use internal variable _counter to keep track of the current value and invoke setNeedsDisplay() when the value is changed. This is needed because - as we will see later, we need to redraw our view every time its value changes. By invoking setNeedsDisplay() we set up a flag that tells the system that this view needs to be redrawn. The counter property is a bit tricky. When we change counter value we write something like circleView.counter += 1 and the setter is being called. It checks if old and new values are different and then changes internal _counter variable. When it is changed, the didSet method is called. It checks the constraints using guard keyword, sets the label value and finally invokes setNeedsDisplay() to redraw the view.\nNext we add initializers and helper methods.\n\n## Initializers and constraints\n\n{% codeblock lang:swift %}\n  override init(frame: CGRect) {\n    super.init(frame: frame)\n\n    createLabel()\n  }\n\n  required public init?(coder aDecoder: NSCoder) {\n    super.init(coder: aDecoder)\n\n    createLabel()\n  }\n\n\n  func createLabel() {\n\n    circleLabel = UILabel(frame: CGRect.zero)\n    circleLabel.text = \"0\"\n    circleLabel.font = UIFont.systemFont(ofSize: 36)\n    circleLabel.textAlignment = .center\n    circleLabel.translatesAutoresizingMaskIntoConstraints = false\n    self.addSubview(circleLabel)\n\n    updateConstraints()\n  }\n\n\n  override public func updateConstraints() {\n\n    if shouldUpdateContraints {\n\n      let xCenter = NSLayoutConstraint(item: circleLabel, attribute: .centerX, relatedBy: .equal, toItem: self, attribute: .centerX, multiplier: 1, constant: 0)\n      let yCenter = NSLayoutConstraint(item: circleLabel, attribute: .centerY, relatedBy: .equal, toItem: self, attribute: .centerY, multiplier: 1, constant: 0)\n      NSLayoutConstraint.activate([xCenter, yCenter])\n\n      shouldUpdateContraints = false\n    }\n    super.updateConstraints()\n  }\n{% endcodeblock %}\n\nSince we are subclassing UIView we have to override the both initializers since we don't know which one can be executed. There we simply create a label, set up some properties and add it to the view. Important here is the updateConstraints() function, which is called by auto-layout engine during view construction process. It's enough to set up constraints once so we add new internal variable to our class definition:\n\n{% codeblock lang:swift %}\n  var shouldUpdateContraints: Bool = true\n{% endcodeblock %}\n\nRemember that we must always call updateConstraints() function from our parent class in the end.\n\n## Draw our view\n\nLast, but not least, we override the draw function. It is called every time the view needs to be rendered on the screen. You should NEVER call it manually, because it's being called automatically by the system during screen update cycle. If you need to redraw some of your views, just call setNeedsDisplay() function on it and it will be redrawn on the next update cycle.\n\n{% codeblock lang:swift %}\n  override public func draw(_ rect: CGRect) {\n    //1\n    guard lineWidth>0 else {\n      return\n    }\n\n    guard maxValue>minValue else {\n      return\n    }\n\n    guard arcWidth>0 && arcAngle>0 else {\n      return\n    }\n\n    guard (minValue...maxValue) ~= counter else {\n      return\n    }\n\n    //2\n    let center = CGPoint(x: bounds.width / 2, y: bounds.height / 2)\n    let arcAngleRadians = CGFloat(arcAngle.degreesToRadians)\n    let startAngle: CGFloat = 3 * .pi/2 - arcAngleRadians/2\n    let endAngle: CGFloat = 3 * .pi/2 + arcAngleRadians/2\n\n    // 3\n    let outlinePath = UIBezierPath(arcCenter: center,\n                                   radius: (bounds.width - lineWidth)/2,\n                                   startAngle: startAngle,\n                                   endAngle: endAngle,\n                                   clockwise: true)\n    outlinePath.addArc(withCenter: center,\n                       radius: bounds.width/2 - arcWidth + lineWidth/2,\n                       startAngle: endAngle,\n                       endAngle: startAngle,\n                       clockwise: false)\n\n    outlinePath.close()\n    outlineColor.setStroke()\n    outlinePath.lineWidth = lineWidth\n    outlinePath.stroke()    \n\n    // 4\n    let arcLengthPerValue = arcAngleRadians / CGFloat(maxValue - minValue)\n    let outlineEndAngle = arcLengthPerValue * CGFloat(counter - minValue) + startAngle\n\n    let path = UIBezierPath(arcCenter: center,\n                            radius: radius/2 - arcWidth/2,\n                            startAngle: startAngle,\n                            endAngle: outlineEndAngle,\n                            clockwise: true)\n\n    path.lineWidth = arcWidth\n    counterColor.setStroke()\n    path.stroke()\n\n\n  }\n{% endcodeblock %}\n\nThis is our main function, where all basic work for our view is done so let's quickly go through the steps.\nI found the perfect image on raywendelich.com web-site so it can help you to understand the maths behind these calculations.\n\n![\"Unit circle\"](https://koenig-media.raywenderlich.com/uploads/2014/12/1-FloUnitCircle.png)\n\n1. Check if view variables are set correctly, otherwise don't draw anything.\n2. Calculate basic variables. Here we get our center point (we need it since we're drawing a circle), convert arcAngle to radians because Core Graphics module is using radians. We also calculate start and end angle, which is arc \"length\" dependent.\nSince our arc \"center\" is potentially located at 3*pi/2 point (image if someone set 180 degrees for arcAngle). So to find start angle we need to substract a half of our arcLength from the center and add it to find the end. Pretty simple, huh?\n3. Here we draw the basic outline across all the view using Core Graphics and UIBezierPath object. First we specify outer line, then add the inner one, close the shape and draw it.\n4. Here we draw the \"counter\" arc. First we need to calculate end angle, depending on the counter value. First we calculate how many \"degrees\" (actually in radians, but it's easier to understand) each counter value consists of, then we just multiply it to the value itself and add start angle.\n\nHere we go, our view is ready for test, so let add it to the storyboard! Open Main.storyboard file with Interface builder and add new UIView object and two buttons to the scene. Next, add these variables and method to ViewController.swift :\n\n{% codeblock lang:swift %}\n  //add to ViewController class\n  @IBOutlet weak var circleView: CircleView!\n  @IBOutlet weak var plusButton: UIButton!\n  @IBOutlet weak var minusButton: UIButton!\n\n  @IBAction func buttonPressed(_ sender: UIButton) {\n    if sender == plusButton {\n      circleView.counter += 1\n    } else {\n      circleView.counter -= 1\n    }\n  }\n{% endcodeblock %}\n\nNo go back to the storyboard, and add referencing outlets for buttons and circleView. Then add buttonPressed selector for both buttons (you can do this by right-clicking on the button/view and then touch and drag your pointer from \"+\" sign to the ViewController in Scene tree on the left side of IB window). Here is the result for plus button:\n\n![\"Result for IB 1\"](/images/ib_1.png)\n\nThen add constraints for the buttons to be placed according to the screenshot above and for the circleView as follows:\n\n![\"Result for IB 1\"](/images/ib_2.png)\n\nLast step is to specify CircleView class for our UIView object. Write it on the Identity Inspector tab. After you've done it, xcode will compile your view class and draw it. Now you can change all your attributes on Attributed Inspector tab and you will see the changes immediately, even without running an app. Whoa!!\n\n![\"Result for IB 1\"](/images/ib_3.png)\n\nNow you can set up initial values using IB and run your app to see if everything works fine. Congratulations! You've just created your first custom UI Element that is IB compatible and designable plus uses auto-layout to stretch itself into different screens. In the next tutorial we'll add gesture recognizers to our view to make value changing more intuitive :)\n\nBy the way, I've recently pushed my RFCircleView into the CocoaPods repository. If you don't know what CocoaPods is, go to the https://cocoapods.org/ right now and check it out - this is an amazing tool with a huge library of community-developed plugins to do almost anything on iOS. {% link Here is the link https://cocoapods.org/pods/RFCircleView %} to my view repository. So that's all for today, I hope that the article was helpful!\n\nCheers,\nRoman Filippov.\n","source":"_posts/How-to-create-custom-Storyboard-frendly-UIView-without-XIB.md","raw":"---\ntitle: How to create custom storyboard-friendly UIView without XIB\ndate: 2017-09-23 00:00:07\ntags:\n- ios\n- xcode\n- storyboard\n- swift\n- ibdesignable\ncategories: iOS\n---\n\n{% blockquote  Charles-Guillaume Étienne %}\nOne is never served so well as by oneself.\n{% endblockquote %}\n\nIn this short tutorial we will create a custom UI control view, make it easily designable with storyboard and auto-layout compatible. With no doubt you can design and create your views using XIB files or directly on storyboards, but in complex applications views can be complicated too. They can be dynamically loaded, depending on the events or just hard-coded using some other 3rd party view classes that aren't storyboard-friendly. Anyway you will see that the process itself is very easy and understandable, so let's get started!\n\n## Creating a project\n\nOpen Xcode and create a new single-view application. In this tutorial I'll use Swift 4, but it's of course possible to make everything using earlier versions of Swift (with a slightly different syntax) or even Objective-C.\n\nOnce created, the app contains a default view controller and a storyboard.\n![\"Result of the tutorial\"](/images/xib_header.png)\nIn this tutorial we will create a circle UI element that usually helps to depict some stored value in settings section of your app (could be anything else, it's up to your imagination!). So first we create a new Swift file with a UIView subclass definition inside. Since we don't need name prefixes anymore, we simply call that class CircleView. Let's start by adding several variables and properties, please see the code listing below.\n\n{% codeblock lang:swift %}\n  @IBDesignable public class CircleView: UIView {\n\n    var circleLabel: UILabel!\n    @IBInspectable public var outlineColor: UIColor = UIColor.orange\n    @IBInspectable public var counterColor: UIColor = UIColor.orange\n    @IBInspectable public var minValue: Int = 0\n    @IBInspectable public var maxValue: Int = 8\n    @IBInspectable public var lineWidth: CGFloat = 4.0\n    @IBInspectable public var arcWidth: CGFloat = 80.0\n    @IBInspectable public var arcAngle: Int = 360\n\n  }\n{% endcodeblock %}\n\nHere we declare the basic parameters of our view - outline and counter colors, min and max values of our counter, also the line width of our outline, the width of the arc and the general arc angle in degrees (this is the angle when our counter reaches its maximum). All properties are declared as public so that we should be able to change them from the outside of the class, except the label, which is intended only for showing the counter, so we hide it's implementation. Note the @IBDesignable keyword before the class definition. It tells xcode that the class should be rendered in IB. We also use @IBInspectable keyword to show that these properties should be Interface Builder compatible so we could change them from our storyboard file without writing any code. We'll soon come to that. At the next step we add the counter property and some util methods to the class definition.\n\n{% codeblock lang:swift %}\n  var _counter: Int = 0 {\n    didSet {\n\n      guard _counter >= minValue else {\n        _counter = minValue\n        return\n      }\n\n      guard _counter <= maxValue else {\n        _counter = maxValue\n        return\n      }\n\n      circleLabel.text = String(_counter)\n      setNeedsDisplay()\n    }\n  }\n\n  @IBInspectable public var counter: Int {\n    get {\n      return _counter\n    }\n    set (aNewValue) {\n\n      if aNewValue != _counter {\n        _counter = aNewValue\n      }\n    }\n  }\n\n  var radius: CGFloat {\n    get {\n      return max(bounds.width, bounds.height)\n    }\n  }\n\n  var valuesCount: Int {\n    get {\n      return maxValue-minValue+1\n    }\n  }\n{% endcodeblock %}\n\nHere we use internal variable _counter to keep track of the current value and invoke setNeedsDisplay() when the value is changed. This is needed because - as we will see later, we need to redraw our view every time its value changes. By invoking setNeedsDisplay() we set up a flag that tells the system that this view needs to be redrawn. The counter property is a bit tricky. When we change counter value we write something like circleView.counter += 1 and the setter is being called. It checks if old and new values are different and then changes internal _counter variable. When it is changed, the didSet method is called. It checks the constraints using guard keyword, sets the label value and finally invokes setNeedsDisplay() to redraw the view.\nNext we add initializers and helper methods.\n\n## Initializers and constraints\n\n{% codeblock lang:swift %}\n  override init(frame: CGRect) {\n    super.init(frame: frame)\n\n    createLabel()\n  }\n\n  required public init?(coder aDecoder: NSCoder) {\n    super.init(coder: aDecoder)\n\n    createLabel()\n  }\n\n\n  func createLabel() {\n\n    circleLabel = UILabel(frame: CGRect.zero)\n    circleLabel.text = \"0\"\n    circleLabel.font = UIFont.systemFont(ofSize: 36)\n    circleLabel.textAlignment = .center\n    circleLabel.translatesAutoresizingMaskIntoConstraints = false\n    self.addSubview(circleLabel)\n\n    updateConstraints()\n  }\n\n\n  override public func updateConstraints() {\n\n    if shouldUpdateContraints {\n\n      let xCenter = NSLayoutConstraint(item: circleLabel, attribute: .centerX, relatedBy: .equal, toItem: self, attribute: .centerX, multiplier: 1, constant: 0)\n      let yCenter = NSLayoutConstraint(item: circleLabel, attribute: .centerY, relatedBy: .equal, toItem: self, attribute: .centerY, multiplier: 1, constant: 0)\n      NSLayoutConstraint.activate([xCenter, yCenter])\n\n      shouldUpdateContraints = false\n    }\n    super.updateConstraints()\n  }\n{% endcodeblock %}\n\nSince we are subclassing UIView we have to override the both initializers since we don't know which one can be executed. There we simply create a label, set up some properties and add it to the view. Important here is the updateConstraints() function, which is called by auto-layout engine during view construction process. It's enough to set up constraints once so we add new internal variable to our class definition:\n\n{% codeblock lang:swift %}\n  var shouldUpdateContraints: Bool = true\n{% endcodeblock %}\n\nRemember that we must always call updateConstraints() function from our parent class in the end.\n\n## Draw our view\n\nLast, but not least, we override the draw function. It is called every time the view needs to be rendered on the screen. You should NEVER call it manually, because it's being called automatically by the system during screen update cycle. If you need to redraw some of your views, just call setNeedsDisplay() function on it and it will be redrawn on the next update cycle.\n\n{% codeblock lang:swift %}\n  override public func draw(_ rect: CGRect) {\n    //1\n    guard lineWidth>0 else {\n      return\n    }\n\n    guard maxValue>minValue else {\n      return\n    }\n\n    guard arcWidth>0 && arcAngle>0 else {\n      return\n    }\n\n    guard (minValue...maxValue) ~= counter else {\n      return\n    }\n\n    //2\n    let center = CGPoint(x: bounds.width / 2, y: bounds.height / 2)\n    let arcAngleRadians = CGFloat(arcAngle.degreesToRadians)\n    let startAngle: CGFloat = 3 * .pi/2 - arcAngleRadians/2\n    let endAngle: CGFloat = 3 * .pi/2 + arcAngleRadians/2\n\n    // 3\n    let outlinePath = UIBezierPath(arcCenter: center,\n                                   radius: (bounds.width - lineWidth)/2,\n                                   startAngle: startAngle,\n                                   endAngle: endAngle,\n                                   clockwise: true)\n    outlinePath.addArc(withCenter: center,\n                       radius: bounds.width/2 - arcWidth + lineWidth/2,\n                       startAngle: endAngle,\n                       endAngle: startAngle,\n                       clockwise: false)\n\n    outlinePath.close()\n    outlineColor.setStroke()\n    outlinePath.lineWidth = lineWidth\n    outlinePath.stroke()    \n\n    // 4\n    let arcLengthPerValue = arcAngleRadians / CGFloat(maxValue - minValue)\n    let outlineEndAngle = arcLengthPerValue * CGFloat(counter - minValue) + startAngle\n\n    let path = UIBezierPath(arcCenter: center,\n                            radius: radius/2 - arcWidth/2,\n                            startAngle: startAngle,\n                            endAngle: outlineEndAngle,\n                            clockwise: true)\n\n    path.lineWidth = arcWidth\n    counterColor.setStroke()\n    path.stroke()\n\n\n  }\n{% endcodeblock %}\n\nThis is our main function, where all basic work for our view is done so let's quickly go through the steps.\nI found the perfect image on raywendelich.com web-site so it can help you to understand the maths behind these calculations.\n\n![\"Unit circle\"](https://koenig-media.raywenderlich.com/uploads/2014/12/1-FloUnitCircle.png)\n\n1. Check if view variables are set correctly, otherwise don't draw anything.\n2. Calculate basic variables. Here we get our center point (we need it since we're drawing a circle), convert arcAngle to radians because Core Graphics module is using radians. We also calculate start and end angle, which is arc \"length\" dependent.\nSince our arc \"center\" is potentially located at 3*pi/2 point (image if someone set 180 degrees for arcAngle). So to find start angle we need to substract a half of our arcLength from the center and add it to find the end. Pretty simple, huh?\n3. Here we draw the basic outline across all the view using Core Graphics and UIBezierPath object. First we specify outer line, then add the inner one, close the shape and draw it.\n4. Here we draw the \"counter\" arc. First we need to calculate end angle, depending on the counter value. First we calculate how many \"degrees\" (actually in radians, but it's easier to understand) each counter value consists of, then we just multiply it to the value itself and add start angle.\n\nHere we go, our view is ready for test, so let add it to the storyboard! Open Main.storyboard file with Interface builder and add new UIView object and two buttons to the scene. Next, add these variables and method to ViewController.swift :\n\n{% codeblock lang:swift %}\n  //add to ViewController class\n  @IBOutlet weak var circleView: CircleView!\n  @IBOutlet weak var plusButton: UIButton!\n  @IBOutlet weak var minusButton: UIButton!\n\n  @IBAction func buttonPressed(_ sender: UIButton) {\n    if sender == plusButton {\n      circleView.counter += 1\n    } else {\n      circleView.counter -= 1\n    }\n  }\n{% endcodeblock %}\n\nNo go back to the storyboard, and add referencing outlets for buttons and circleView. Then add buttonPressed selector for both buttons (you can do this by right-clicking on the button/view and then touch and drag your pointer from \"+\" sign to the ViewController in Scene tree on the left side of IB window). Here is the result for plus button:\n\n![\"Result for IB 1\"](/images/ib_1.png)\n\nThen add constraints for the buttons to be placed according to the screenshot above and for the circleView as follows:\n\n![\"Result for IB 1\"](/images/ib_2.png)\n\nLast step is to specify CircleView class for our UIView object. Write it on the Identity Inspector tab. After you've done it, xcode will compile your view class and draw it. Now you can change all your attributes on Attributed Inspector tab and you will see the changes immediately, even without running an app. Whoa!!\n\n![\"Result for IB 1\"](/images/ib_3.png)\n\nNow you can set up initial values using IB and run your app to see if everything works fine. Congratulations! You've just created your first custom UI Element that is IB compatible and designable plus uses auto-layout to stretch itself into different screens. In the next tutorial we'll add gesture recognizers to our view to make value changing more intuitive :)\n\nBy the way, I've recently pushed my RFCircleView into the CocoaPods repository. If you don't know what CocoaPods is, go to the https://cocoapods.org/ right now and check it out - this is an amazing tool with a huge library of community-developed plugins to do almost anything on iOS. {% link Here is the link https://cocoapods.org/pods/RFCircleView %} to my view repository. So that's all for today, I hope that the article was helpful!\n\nCheers,\nRoman Filippov.\n","slug":"How-to-create-custom-Storyboard-frendly-UIView-without-XIB","published":1,"updated":"2017-09-26T23:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj7may0a0000gfscjq8qgb1h","content":"<blockquote><p>One is never served so well as by oneself.</p>\n<footer><strong>Charles-Guillaume Étienne</strong></footer></blockquote>\n<p>In this short tutorial we will create a custom UI control view, make it easily designable with storyboard and auto-layout compatible. With no doubt you can design and create your views using XIB files or directly on storyboards, but in complex applications views can be complicated too. They can be dynamically loaded, depending on the events or just hard-coded using some other 3rd party view classes that aren’t storyboard-friendly. Anyway you will see that the process itself is very easy and understandable, so let’s get started!</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>Open Xcode and create a new single-view application. In this tutorial I’ll use Swift 4, but it’s of course possible to make everything using earlier versions of Swift (with a slightly different syntax) or even Objective-C.</p>\n<p>Once created, the app contains a default view controller and a storyboard.<br><img src=\"/images/xib_header.png\" alt=\"&quot;Result of the tutorial&quot;\"><br>In this tutorial we will create a circle UI element that usually helps to depict some stored value in settings section of your app (could be anything else, it’s up to your imagination!). So first we create a new Swift file with a UIView subclass definition inside. Since we don’t need name prefixes anymore, we simply call that class CircleView. Let’s start by adding several variables and properties, please see the code listing below.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@IBDesignable</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> circleLabel: <span class=\"type\">UILabel</span>!</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> outlineColor: <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.orange</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> counterColor: <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.orange</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> minValue: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> maxValue: <span class=\"type\">Int</span> = <span class=\"number\">8</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> lineWidth: <span class=\"type\">CGFloat</span> = <span class=\"number\">4.0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> arcWidth: <span class=\"type\">CGFloat</span> = <span class=\"number\">80.0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> arcAngle: <span class=\"type\">Int</span> = <span class=\"number\">360</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we declare the basic parameters of our view - outline and counter colors, min and max values of our counter, also the line width of our outline, the width of the arc and the general arc angle in degrees (this is the angle when our counter reaches its maximum). All properties are declared as public so that we should be able to change them from the outside of the class, except the label, which is intended only for showing the counter, so we hide it’s implementation. Note the @IBDesignable keyword before the class definition. It tells xcode that the class should be rendered in IB. We also use @IBInspectable keyword to show that these properties should be Interface Builder compatible so we could change them from our storyboard file without writing any code. We’ll soon come to that. At the next step we add the counter property and some util methods to the class definition.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">guard</span> _counter &gt;= minValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _counter = minValue</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">guard</span> _counter &lt;= maxValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _counter = maxValue</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    circleLabel.text = <span class=\"type\">String</span>(_counter)</div><div class=\"line\">    setNeedsDisplay()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _counter</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">set</span> (aNewValue) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> aNewValue != _counter &#123;</div><div class=\"line\">      _counter = aNewValue</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> radius: <span class=\"type\">CGFloat</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(bounds.width, bounds.height)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> valuesCount: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxValue-minValue+<span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we use internal variable _counter to keep track of the current value and invoke setNeedsDisplay() when the value is changed. This is needed because - as we will see later, we need to redraw our view every time its value changes. By invoking setNeedsDisplay() we set up a flag that tells the system that this view needs to be redrawn. The counter property is a bit tricky. When we change counter value we write something like circleView.counter += 1 and the setter is being called. It checks if old and new values are different and then changes internal _counter variable. When it is changed, the didSet method is called. It checks the constraints using guard keyword, sets the label value and finally invokes setNeedsDisplay() to redraw the view.<br>Next we add initializers and helper methods.</p>\n<h2 id=\"Initializers-and-constraints\"><a href=\"#Initializers-and-constraints\" class=\"headerlink\" title=\"Initializers and constraints\"></a>Initializers and constraints</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</div><div class=\"line\"></div><div class=\"line\">  createLabel()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">required</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</div><div class=\"line\"></div><div class=\"line\">  createLabel()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createLabel</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">  circleLabel = <span class=\"type\">UILabel</span>(frame: <span class=\"type\">CGRect</span>.zero)</div><div class=\"line\">  circleLabel.text = <span class=\"string\">\"0\"</span></div><div class=\"line\">  circleLabel.font = <span class=\"type\">UIFont</span>.systemFont(ofSize: <span class=\"number\">36</span>)</div><div class=\"line\">  circleLabel.textAlignment = .center</div><div class=\"line\">  circleLabel.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"keyword\">self</span>.addSubview(circleLabel)</div><div class=\"line\"></div><div class=\"line\">  updateConstraints()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">updateConstraints</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> shouldUpdateContraints &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> xCenter = <span class=\"type\">NSLayoutConstraint</span>(item: circleLabel, attribute: .centerX, relatedBy: .<span class=\"built_in\">equal</span>, toItem: <span class=\"keyword\">self</span>, attribute: .centerX, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> yCenter = <span class=\"type\">NSLayoutConstraint</span>(item: circleLabel, attribute: .centerY, relatedBy: .<span class=\"built_in\">equal</span>, toItem: <span class=\"keyword\">self</span>, attribute: .centerY, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"type\">NSLayoutConstraint</span>.activate([xCenter, yCenter])</div><div class=\"line\"></div><div class=\"line\">    shouldUpdateContraints = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">super</span>.updateConstraints()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Since we are subclassing UIView we have to override the both initializers since we don’t know which one can be executed. There we simply create a label, set up some properties and add it to the view. Important here is the updateConstraints() function, which is called by auto-layout engine during view construction process. It’s enough to set up constraints once so we add new internal variable to our class definition:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shouldUpdateContraints: <span class=\"type\">Bool</span> = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Remember that we must always call updateConstraints() function from our parent class in the end.</p>\n<h2 id=\"Draw-our-view\"><a href=\"#Draw-our-view\" class=\"headerlink\" title=\"Draw our view\"></a>Draw our view</h2><p>Last, but not least, we override the draw function. It is called every time the view needs to be rendered on the screen. You should NEVER call it manually, because it’s being called automatically by the system during screen update cycle. If you need to redraw some of your views, just call setNeedsDisplay() function on it and it will be redrawn on the next update cycle.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"number\">_</span> rect: CGRect)</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">//1</span></div><div class=\"line\">  <span class=\"keyword\">guard</span> lineWidth&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> maxValue&gt;minValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> arcWidth&gt;<span class=\"number\">0</span> &amp;&amp; arcAngle&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> (minValue...maxValue) ~= counter <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//2</span></div><div class=\"line\">  <span class=\"keyword\">let</span> center = <span class=\"type\">CGPoint</span>(x: bounds.width / <span class=\"number\">2</span>, y: bounds.height / <span class=\"number\">2</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> arcAngleRadians = <span class=\"type\">CGFloat</span>(arcAngle.degreesToRadians)</div><div class=\"line\">  <span class=\"keyword\">let</span> startAngle: <span class=\"type\">CGFloat</span> = <span class=\"number\">3</span> * .pi/<span class=\"number\">2</span> - arcAngleRadians/<span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">let</span> endAngle: <span class=\"type\">CGFloat</span> = <span class=\"number\">3</span> * .pi/<span class=\"number\">2</span> + arcAngleRadians/<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"keyword\">let</span> outlinePath = <span class=\"type\">UIBezierPath</span>(arcCenter: center,</div><div class=\"line\">                                 radius: (bounds.width - lineWidth)/<span class=\"number\">2</span>,</div><div class=\"line\">                                 startAngle: startAngle,</div><div class=\"line\">                                 endAngle: endAngle,</div><div class=\"line\">                                 clockwise: <span class=\"literal\">true</span>)</div><div class=\"line\">  outlinePath.addArc(withCenter: center,</div><div class=\"line\">                     radius: bounds.width/<span class=\"number\">2</span> - arcWidth + lineWidth/<span class=\"number\">2</span>,</div><div class=\"line\">                     startAngle: endAngle,</div><div class=\"line\">                     endAngle: startAngle,</div><div class=\"line\">                     clockwise: <span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">  outlinePath.close()</div><div class=\"line\">  outlineColor.setStroke()</div><div class=\"line\">  outlinePath.lineWidth = lineWidth</div><div class=\"line\">  outlinePath.stroke()    </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 4</span></div><div class=\"line\">  <span class=\"keyword\">let</span> arcLengthPerValue = arcAngleRadians / <span class=\"type\">CGFloat</span>(maxValue - minValue)</div><div class=\"line\">  <span class=\"keyword\">let</span> outlineEndAngle = arcLengthPerValue * <span class=\"type\">CGFloat</span>(counter - minValue) + startAngle</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> path = <span class=\"type\">UIBezierPath</span>(arcCenter: center,</div><div class=\"line\">                          radius: radius/<span class=\"number\">2</span> - arcWidth/<span class=\"number\">2</span>,</div><div class=\"line\">                          startAngle: startAngle,</div><div class=\"line\">                          endAngle: outlineEndAngle,</div><div class=\"line\">                          clockwise: <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">  path.lineWidth = arcWidth</div><div class=\"line\">  counterColor.setStroke()</div><div class=\"line\">  path.stroke()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This is our main function, where all basic work for our view is done so let’s quickly go through the steps.<br>I found the perfect image on raywendelich.com web-site so it can help you to understand the maths behind these calculations.</p>\n<p><img src=\"https://koenig-media.raywenderlich.com/uploads/2014/12/1-FloUnitCircle.png\" alt=\"&quot;Unit circle&quot;\"></p>\n<ol>\n<li>Check if view variables are set correctly, otherwise don’t draw anything.</li>\n<li>Calculate basic variables. Here we get our center point (we need it since we’re drawing a circle), convert arcAngle to radians because Core Graphics module is using radians. We also calculate start and end angle, which is arc “length” dependent.<br>Since our arc “center” is potentially located at 3*pi/2 point (image if someone set 180 degrees for arcAngle). So to find start angle we need to substract a half of our arcLength from the center and add it to find the end. Pretty simple, huh?</li>\n<li>Here we draw the basic outline across all the view using Core Graphics and UIBezierPath object. First we specify outer line, then add the inner one, close the shape and draw it.</li>\n<li>Here we draw the “counter” arc. First we need to calculate end angle, depending on the counter value. First we calculate how many “degrees” (actually in radians, but it’s easier to understand) each counter value consists of, then we just multiply it to the value itself and add start angle.</li>\n</ol>\n<p>Here we go, our view is ready for test, so let add it to the storyboard! Open Main.storyboard file with Interface builder and add new UIView object and two buttons to the scene. Next, add these variables and method to ViewController.swift :</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//add to ViewController class</span></div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> circleView: <span class=\"type\">CircleView</span>!</div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> plusButton: <span class=\"type\">UIButton</span>!</div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> minusButton: <span class=\"type\">UIButton</span>!</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonPressed</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> sender == plusButton &#123;</div><div class=\"line\">    circleView.counter += <span class=\"number\">1</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    circleView.counter -= <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>No go back to the storyboard, and add referencing outlets for buttons and circleView. Then add buttonPressed selector for both buttons (you can do this by right-clicking on the button/view and then touch and drag your pointer from “+” sign to the ViewController in Scene tree on the left side of IB window). Here is the result for plus button:</p>\n<p><img src=\"/images/ib_1.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Then add constraints for the buttons to be placed according to the screenshot above and for the circleView as follows:</p>\n<p><img src=\"/images/ib_2.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Last step is to specify CircleView class for our UIView object. Write it on the Identity Inspector tab. After you’ve done it, xcode will compile your view class and draw it. Now you can change all your attributes on Attributed Inspector tab and you will see the changes immediately, even without running an app. Whoa!!</p>\n<p><img src=\"/images/ib_3.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Now you can set up initial values using IB and run your app to see if everything works fine. Congratulations! You’ve just created your first custom UI Element that is IB compatible and designable plus uses auto-layout to stretch itself into different screens. In the next tutorial we’ll add gesture recognizers to our view to make value changing more intuitive :)</p>\n<p>By the way, I’ve recently pushed my RFCircleView into the CocoaPods repository. If you don’t know what CocoaPods is, go to the <a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">https://cocoapods.org/</a> right now and check it out - this is an amazing tool with a huge library of community-developed plugins to do almost anything on iOS. <a href=\"https://cocoapods.org/pods/RFCircleView\" target=\"_blank\" rel=\"external\">Here is the link</a> to my view repository. So that’s all for today, I hope that the article was helpful!</p>\n<p>Cheers,<br>Roman Filippov.</p>\n","site":{"data":{"projects":[{"name":"RFCircleView","url":"https://cocoapods.org/pods/RFCircleView","desc":"Universal GUI component for iOS. Written using swift and auto-layout."}]}},"excerpt":"","more":"<blockquote><p>One is never served so well as by oneself.</p>\n<footer><strong>Charles-Guillaume Étienne</strong></footer></blockquote>\n<p>In this short tutorial we will create a custom UI control view, make it easily designable with storyboard and auto-layout compatible. With no doubt you can design and create your views using XIB files or directly on storyboards, but in complex applications views can be complicated too. They can be dynamically loaded, depending on the events or just hard-coded using some other 3rd party view classes that aren’t storyboard-friendly. Anyway you will see that the process itself is very easy and understandable, so let’s get started!</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>Open Xcode and create a new single-view application. In this tutorial I’ll use Swift 4, but it’s of course possible to make everything using earlier versions of Swift (with a slightly different syntax) or even Objective-C.</p>\n<p>Once created, the app contains a default view controller and a storyboard.<br><img src=\"/images/xib_header.png\" alt=\"&quot;Result of the tutorial&quot;\"><br>In this tutorial we will create a circle UI element that usually helps to depict some stored value in settings section of your app (could be anything else, it’s up to your imagination!). So first we create a new Swift file with a UIView subclass definition inside. Since we don’t need name prefixes anymore, we simply call that class CircleView. Let’s start by adding several variables and properties, please see the code listing below.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@IBDesignable</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span>: <span class=\"title\">UIView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> circleLabel: <span class=\"type\">UILabel</span>!</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> outlineColor: <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.orange</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> counterColor: <span class=\"type\">UIColor</span> = <span class=\"type\">UIColor</span>.orange</div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> minValue: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> maxValue: <span class=\"type\">Int</span> = <span class=\"number\">8</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> lineWidth: <span class=\"type\">CGFloat</span> = <span class=\"number\">4.0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> arcWidth: <span class=\"type\">CGFloat</span> = <span class=\"number\">80.0</span></div><div class=\"line\">  <span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> arcAngle: <span class=\"type\">Int</span> = <span class=\"number\">360</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we declare the basic parameters of our view - outline and counter colors, min and max values of our counter, also the line width of our outline, the width of the arc and the general arc angle in degrees (this is the angle when our counter reaches its maximum). All properties are declared as public so that we should be able to change them from the outside of the class, except the label, which is intended only for showing the counter, so we hide it’s implementation. Note the @IBDesignable keyword before the class definition. It tells xcode that the class should be rendered in IB. We also use @IBInspectable keyword to show that these properties should be Interface Builder compatible so we could change them from our storyboard file without writing any code. We’ll soon come to that. At the next step we add the counter property and some util methods to the class definition.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _counter: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">guard</span> _counter &gt;= minValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _counter = minValue</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">guard</span> _counter &lt;= maxValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      _counter = maxValue</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    circleLabel.text = <span class=\"type\">String</span>(_counter)</div><div class=\"line\">    setNeedsDisplay()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBInspectable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> counter: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _counter</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">set</span> (aNewValue) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> aNewValue != _counter &#123;</div><div class=\"line\">      _counter = aNewValue</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> radius: <span class=\"type\">CGFloat</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(bounds.width, bounds.height)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> valuesCount: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxValue-minValue+<span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here we use internal variable _counter to keep track of the current value and invoke setNeedsDisplay() when the value is changed. This is needed because - as we will see later, we need to redraw our view every time its value changes. By invoking setNeedsDisplay() we set up a flag that tells the system that this view needs to be redrawn. The counter property is a bit tricky. When we change counter value we write something like circleView.counter += 1 and the setter is being called. It checks if old and new values are different and then changes internal _counter variable. When it is changed, the didSet method is called. It checks the constraints using guard keyword, sets the label value and finally invokes setNeedsDisplay() to redraw the view.<br>Next we add initializers and helper methods.</p>\n<h2 id=\"Initializers-and-constraints\"><a href=\"#Initializers-and-constraints\" class=\"headerlink\" title=\"Initializers and constraints\"></a>Initializers and constraints</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</div><div class=\"line\"></div><div class=\"line\">  createLabel()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">required</span> <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</div><div class=\"line\"></div><div class=\"line\">  createLabel()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">createLabel</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">  circleLabel = <span class=\"type\">UILabel</span>(frame: <span class=\"type\">CGRect</span>.zero)</div><div class=\"line\">  circleLabel.text = <span class=\"string\">\"0\"</span></div><div class=\"line\">  circleLabel.font = <span class=\"type\">UIFont</span>.systemFont(ofSize: <span class=\"number\">36</span>)</div><div class=\"line\">  circleLabel.textAlignment = .center</div><div class=\"line\">  circleLabel.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></div><div class=\"line\">  <span class=\"keyword\">self</span>.addSubview(circleLabel)</div><div class=\"line\"></div><div class=\"line\">  updateConstraints()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">updateConstraints</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> shouldUpdateContraints &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> xCenter = <span class=\"type\">NSLayoutConstraint</span>(item: circleLabel, attribute: .centerX, relatedBy: .<span class=\"built_in\">equal</span>, toItem: <span class=\"keyword\">self</span>, attribute: .centerX, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> yCenter = <span class=\"type\">NSLayoutConstraint</span>(item: circleLabel, attribute: .centerY, relatedBy: .<span class=\"built_in\">equal</span>, toItem: <span class=\"keyword\">self</span>, attribute: .centerY, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"type\">NSLayoutConstraint</span>.activate([xCenter, yCenter])</div><div class=\"line\"></div><div class=\"line\">    shouldUpdateContraints = <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">super</span>.updateConstraints()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Since we are subclassing UIView we have to override the both initializers since we don’t know which one can be executed. There we simply create a label, set up some properties and add it to the view. Important here is the updateConstraints() function, which is called by auto-layout engine during view construction process. It’s enough to set up constraints once so we add new internal variable to our class definition:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shouldUpdateContraints: <span class=\"type\">Bool</span> = <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>Remember that we must always call updateConstraints() function from our parent class in the end.</p>\n<h2 id=\"Draw-our-view\"><a href=\"#Draw-our-view\" class=\"headerlink\" title=\"Draw our view\"></a>Draw our view</h2><p>Last, but not least, we override the draw function. It is called every time the view needs to be rendered on the screen. You should NEVER call it manually, because it’s being called automatically by the system during screen update cycle. If you need to redraw some of your views, just call setNeedsDisplay() function on it and it will be redrawn on the next update cycle.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"number\">_</span> rect: CGRect)</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">//1</span></div><div class=\"line\">  <span class=\"keyword\">guard</span> lineWidth&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> maxValue&gt;minValue <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> arcWidth&gt;<span class=\"number\">0</span> &amp;&amp; arcAngle&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">guard</span> (minValue...maxValue) ~= counter <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//2</span></div><div class=\"line\">  <span class=\"keyword\">let</span> center = <span class=\"type\">CGPoint</span>(x: bounds.width / <span class=\"number\">2</span>, y: bounds.height / <span class=\"number\">2</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> arcAngleRadians = <span class=\"type\">CGFloat</span>(arcAngle.degreesToRadians)</div><div class=\"line\">  <span class=\"keyword\">let</span> startAngle: <span class=\"type\">CGFloat</span> = <span class=\"number\">3</span> * .pi/<span class=\"number\">2</span> - arcAngleRadians/<span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">let</span> endAngle: <span class=\"type\">CGFloat</span> = <span class=\"number\">3</span> * .pi/<span class=\"number\">2</span> + arcAngleRadians/<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3</span></div><div class=\"line\">  <span class=\"keyword\">let</span> outlinePath = <span class=\"type\">UIBezierPath</span>(arcCenter: center,</div><div class=\"line\">                                 radius: (bounds.width - lineWidth)/<span class=\"number\">2</span>,</div><div class=\"line\">                                 startAngle: startAngle,</div><div class=\"line\">                                 endAngle: endAngle,</div><div class=\"line\">                                 clockwise: <span class=\"literal\">true</span>)</div><div class=\"line\">  outlinePath.addArc(withCenter: center,</div><div class=\"line\">                     radius: bounds.width/<span class=\"number\">2</span> - arcWidth + lineWidth/<span class=\"number\">2</span>,</div><div class=\"line\">                     startAngle: endAngle,</div><div class=\"line\">                     endAngle: startAngle,</div><div class=\"line\">                     clockwise: <span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">  outlinePath.close()</div><div class=\"line\">  outlineColor.setStroke()</div><div class=\"line\">  outlinePath.lineWidth = lineWidth</div><div class=\"line\">  outlinePath.stroke()    </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 4</span></div><div class=\"line\">  <span class=\"keyword\">let</span> arcLengthPerValue = arcAngleRadians / <span class=\"type\">CGFloat</span>(maxValue - minValue)</div><div class=\"line\">  <span class=\"keyword\">let</span> outlineEndAngle = arcLengthPerValue * <span class=\"type\">CGFloat</span>(counter - minValue) + startAngle</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> path = <span class=\"type\">UIBezierPath</span>(arcCenter: center,</div><div class=\"line\">                          radius: radius/<span class=\"number\">2</span> - arcWidth/<span class=\"number\">2</span>,</div><div class=\"line\">                          startAngle: startAngle,</div><div class=\"line\">                          endAngle: outlineEndAngle,</div><div class=\"line\">                          clockwise: <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">  path.lineWidth = arcWidth</div><div class=\"line\">  counterColor.setStroke()</div><div class=\"line\">  path.stroke()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This is our main function, where all basic work for our view is done so let’s quickly go through the steps.<br>I found the perfect image on raywendelich.com web-site so it can help you to understand the maths behind these calculations.</p>\n<p><img src=\"https://koenig-media.raywenderlich.com/uploads/2014/12/1-FloUnitCircle.png\" alt=\"&quot;Unit circle&quot;\"></p>\n<ol>\n<li>Check if view variables are set correctly, otherwise don’t draw anything.</li>\n<li>Calculate basic variables. Here we get our center point (we need it since we’re drawing a circle), convert arcAngle to radians because Core Graphics module is using radians. We also calculate start and end angle, which is arc “length” dependent.<br>Since our arc “center” is potentially located at 3*pi/2 point (image if someone set 180 degrees for arcAngle). So to find start angle we need to substract a half of our arcLength from the center and add it to find the end. Pretty simple, huh?</li>\n<li>Here we draw the basic outline across all the view using Core Graphics and UIBezierPath object. First we specify outer line, then add the inner one, close the shape and draw it.</li>\n<li>Here we draw the “counter” arc. First we need to calculate end angle, depending on the counter value. First we calculate how many “degrees” (actually in radians, but it’s easier to understand) each counter value consists of, then we just multiply it to the value itself and add start angle.</li>\n</ol>\n<p>Here we go, our view is ready for test, so let add it to the storyboard! Open Main.storyboard file with Interface builder and add new UIView object and two buttons to the scene. Next, add these variables and method to ViewController.swift :</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//add to ViewController class</span></div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> circleView: <span class=\"type\">CircleView</span>!</div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> plusButton: <span class=\"type\">UIButton</span>!</div><div class=\"line\"><span class=\"meta\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> minusButton: <span class=\"type\">UIButton</span>!</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonPressed</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> sender == plusButton &#123;</div><div class=\"line\">    circleView.counter += <span class=\"number\">1</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    circleView.counter -= <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>No go back to the storyboard, and add referencing outlets for buttons and circleView. Then add buttonPressed selector for both buttons (you can do this by right-clicking on the button/view and then touch and drag your pointer from “+” sign to the ViewController in Scene tree on the left side of IB window). Here is the result for plus button:</p>\n<p><img src=\"/images/ib_1.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Then add constraints for the buttons to be placed according to the screenshot above and for the circleView as follows:</p>\n<p><img src=\"/images/ib_2.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Last step is to specify CircleView class for our UIView object. Write it on the Identity Inspector tab. After you’ve done it, xcode will compile your view class and draw it. Now you can change all your attributes on Attributed Inspector tab and you will see the changes immediately, even without running an app. Whoa!!</p>\n<p><img src=\"/images/ib_3.png\" alt=\"&quot;Result for IB 1&quot;\"></p>\n<p>Now you can set up initial values using IB and run your app to see if everything works fine. Congratulations! You’ve just created your first custom UI Element that is IB compatible and designable plus uses auto-layout to stretch itself into different screens. In the next tutorial we’ll add gesture recognizers to our view to make value changing more intuitive :)</p>\n<p>By the way, I’ve recently pushed my RFCircleView into the CocoaPods repository. If you don’t know what CocoaPods is, go to the <a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">https://cocoapods.org/</a> right now and check it out - this is an amazing tool with a huge library of community-developed plugins to do almost anything on iOS. <a href=\"https://cocoapods.org/pods/RFCircleView\" target=\"_blank\" rel=\"external\">Here is the link</a> to my view repository. So that’s all for today, I hope that the article was helpful!</p>\n<p>Cheers,<br>Roman Filippov.</p>\n"},{"title":"How to make self-resizing table view cells","date":"2017-09-27T22:59:23.000Z","_content":"","source":"_posts/How-to-make-self-resizing-table-view-cells.md","raw":"---\ntitle: How to make self-resizing table view cells\ndate: 2017-09-28 01:59:23\ntags:\n---\n","slug":"How-to-make-self-resizing-table-view-cells","published":1,"updated":"2017-09-27T22:59:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj7may0i0002gfschhik4fjy","content":"","site":{"data":{"projects":[{"name":"RFCircleView","url":"https://cocoapods.org/pods/RFCircleView","desc":"Universal GUI component for iOS. Written using swift and auto-layout."}]}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ckj7may0a0000gfscjq8qgb1h","category_id":"ckj7may0l0003gfsc83tkv6ia","_id":"ckj7may0u0006gfsc877kkmxj"}],"PostTag":[{"post_id":"ckj7may0a0000gfscjq8qgb1h","tag_id":"ckj7may0o0004gfsct5asdtgq","_id":"ckj7may0z000agfscy866ykdl"},{"post_id":"ckj7may0a0000gfscjq8qgb1h","tag_id":"ckj7may0s0005gfscktcgel75","_id":"ckj7may0z000bgfscqkrdu8gp"},{"post_id":"ckj7may0a0000gfscjq8qgb1h","tag_id":"ckj7may0v0007gfscw2dus18b","_id":"ckj7may0z000cgfscvcft3luf"},{"post_id":"ckj7may0a0000gfscjq8qgb1h","tag_id":"ckj7may0w0008gfsckne5xhul","_id":"ckj7may10000dgfsct8sgnvl6"},{"post_id":"ckj7may0a0000gfscjq8qgb1h","tag_id":"ckj7may0y0009gfscoekn9wa8","_id":"ckj7may10000egfscvjq1dnl0"}],"Tag":[{"name":"ios","_id":"ckj7may0o0004gfsct5asdtgq"},{"name":"xcode","_id":"ckj7may0s0005gfscktcgel75"},{"name":"storyboard","_id":"ckj7may0v0007gfscw2dus18b"},{"name":"swift","_id":"ckj7may0w0008gfsckne5xhul"},{"name":"ibdesignable","_id":"ckj7may0y0009gfscoekn9wa8"}]}}